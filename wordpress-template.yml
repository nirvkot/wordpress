apiVersion: v1
kind: Template
metadata:
  name: wordpress-nginx-php
  annotations:
    description: This template defines and creates resources for Wordpress installation which is running on Nginx and using MariaDB database. Version of PHP-FPM is 7.1.
    iconClass: icon-wordpress
    openshift.io/display-name: Wordpress + Nginx
    openshift.io/documentation-url: https://github.com/Tessg22/making-a-wordpress-developer-stack-on-openshift-4/blob/master/README.md
    openshift.io/provider-display-name: Tereza Gabrielova
    tags: quickstart,php,wordpress,nginx
    template.openshift.io/bindable: "false"
labels:
  template: wordpress-nginx
  app: ${NAME}
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}-db
  spec:
    ports:
    - name: mariadb
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: ${NAME}
      name: ${NAME}-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: phpmyadmin
      app.kubernetes.io/component: phpmyadmin
      app.kubernetes.io/instance: phpmyadmin
      app.kubernetes.io/part-of: phpmyadmin-app
      app.openshift.io/runtime-version: latest
    name: phpmyadmin
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: phpmyadmin
      deploymentconfig: phpmyadmin
      
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db-secret
          - name: MYSQL_HOST
            value: ${NAME}-db
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: OPENSHIFT_BUILD_NAME
            value: "1"
          image: tgabriel/wordpress@sha256:720aebef05828256e25be9e4bf5d03b7308898ebcff5f75288347df3a77c3e00
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  cp -fr /code/. /app; rm -rfv /shared/*; rm -rf /app/web; cp -fr /code/web /app/web;
          name: php-fpm
          resources:
            limits:
              cpu: ${APP_CPU_LIMIT}
              memory: ${APP_MEMORY_LIMIT}
            requests:
              cpu: ${APP_CPU_REQUEST}
              memory: ${APP_MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app
          - mountPath: /shared
            name: ${NAME}-files
        - image: tgabriel/nginx-openshift@sha256:83eb61c61612cd603765fcae13ce427ceec9bcb1fcb59f157b511e73ba71436b
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          resources:
            limits:
              cpu: ${APP_CPU_LIMIT}
              memory: ${APP_MEMORY_LIMIT}
            requests:
              cpu: ${APP_CPU_REQUEST}
              memory: ${APP_MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: app
        - name: ${NAME}-files
          persistentVolumeClaim:
            claimName: ${NAME}-files
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - php-fpm
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: nginx-openshift:latest
          namespace: ${NAMESPACE}
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}-db
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${NAME}
      name: ${NAME}-db
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources:
        limits:
          cpu: ${DB_CPU_LIMIT}
          memory: ${DB_MEMORY_LIMIT}
        requests:
          cpu: ${DB_CPU_REQUEST}
          memory: ${DB_MEMORY_REQUEST}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${NAME}
          name: ${NAME}-db
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${NAME}
          - name: MYSQL_DATABASE
            value: ${NAME}
          image: image-registry.openshift-image-registry.svc:5000/openshift/mariadb@sha256:513f7db527608c6c96b3659220ffc0397bdd30ff6617dad1790a90e14ac4f3b0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mariadb
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${NAME}-db-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${NAME}-db-data
          persistentVolumeClaim:
            claimName: ${NAME}-db
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:latest
          namespace: openshift
        lastTriggeredImage: image-registry.openshift-image-registry.svc:5000/openshift/mariadb@sha256:513f7db527608c6c96b3659220ffc0397bdd30ff6617dad1790a90e14ac4f3b0
      type: ImageChange
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: phpmyadmin
      app.kubernetes.io/component: phpmyadmin
      app.kubernetes.io/instance: phpmyadmin
      app.kubernetes.io/part-of: phpmyadmin-app
      app.openshift.io/runtime: mysql-database
    name: phpmyadmin
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: phpmyadmin
      deploymentconfig: phpmyadmin
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: phpmyadmin
          deploymentconfig: phpmyadmin
      spec:
        containers:
        - env:
          - name: PMA_ARBITRARY
            value: "1"
          - name: BLOWFISH_SECRET
            valueFrom:
              secretKeyRef:
                key: blowfish_secret
                name: phpmyadmin
          image: kicm/openshift-phpmyadmin
          imagePullPolicy: IfNotPresent
          name: phpmyadmin
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - phpmyadmin
        from:
          kind: ImageStreamTag
          name: phpmyadmin:latest
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: nginx-openshift
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: tgabriel/nginx-openshift:1.24
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: phpmyadmin
      app.kubernetes.io/component: phpmyadmin
      app.kubernetes.io/instance: phpmyadmin
      app.kubernetes.io/part-of: phpmyadmin-app
    name: phpmyadmin
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: kicm/openshift-phpmyadmin
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: tgabriel/wordpress-openshift:1.0
      generation: 1
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: wordpress
    name: wordpress
  spec:
    host: ${NAME}-${NAMESPACE}.${ROUTER_CANONICAL_HOSTNAME}
    port:
      targetPort: http
    to:
      kind: Service
      name: wordpress
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: phpmyadmin
      app.kubernetes.io/component: phpmyadmin
      app.kubernetes.io/instance: phpmyadmin
      app.kubernetes.io/part-of: phpmyadmin-app
      app.openshift.io/runtime-version: latest
    name: phpmyadmin
  spec:
    host: phpmyadmin-${NAMESPACE}.${ROUTER_CANONICAL_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: phpmyadmin
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: wordpress-files
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${FILES_VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: wordpress-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}
- apiVersion: v1
  kind: Secret
  metadata:
    name: wordpress-db-secret
  stringData:
    database-user: wordpress
    database-password: eSoiDenThicO
    database-root-password: nKatIcTRIToR
- apiVersion: v1
  kind: Secret
  metadata:
    name: phpmyadmin
  stringData:
    blowfish_secret: 3/qwdRro5m{UCOYA_M-t*pwEH!E->Mqj
- apiVersion: v1
  kind: Secret
  metadata:
    name: wordpress
  stringData:
    database-user: wordpress
    database-password: eSoiDenThicO
    database-root-password: nKatIcTRIToR
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: wordpress
    name: wordpress
  spec:
    failedBuildsHistoryLimit: 5
    output:
      to:
        kind: ImageStreamTag
        name: wordpress:latest
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/Tessg22/making-a-wordpress-developer-stack-on-openshift-4/
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: deploy/Dockerfile
      type: Docker
    successfulBuildsHistoryLimit: 5
- apiVersion: tekton.dev/v1beta1
  kind: Pipeline
  metadata:
    name: build-and-deploy
  spec:
    workspaces: 
    - name: shared-workspace
    resources:
    - name: app-git
      type: git
    - name: app-image
      type: image
    params: 
    - name: deployment-name
      type: string
      description: name of the deployment to be patched
    - name: git-url
      type: string
      description: url of the git repo for the code of deployment
    - name: git-revision
      type: string
      description: revision to be used from repo of the code for deployment
      default: "release-tech-preview-3"
    - name: IMAGE
      type: string
      description: image to be build from the code
    tasks:
    - name: build
      params:
      - name: TLSVERIFY
        value: "false"
      resources:
        inputs:
        - name: source
          resource: app-git
        outputs:
        - name: image
          resource: app-image
      taskRef:
        name: s2i-php
    - name: deploy
      params:
      - name: ARGS
        value: start-build ${NAME}
      runAfter:
        - build
      taskRef:
        name: openshift-client
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: openshift-client
    labels:
      app.kubernetes.io/version: "0.1"
    annotations:
      tekton.dev/pipelines.minVersion: "0.11.3"
      tekton.dev/tags: openshift-client, cli
      tekton.dev/displayName: "openshift client"
  spec:
    description: >-
      openshift-client task helps to run oc commands.
    params:
      - default: help
        description: The OpenShift CLI arguments to run
        name: ARGS
    steps:
    - name: oc
      args: ['$(params.ARGS)']
      command: ['/usr/local/bin/oc']
      image: quay.io/openshift-pipeline/openshift-cli:latest
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: s2i-php
    labels:
      app.kubernetes.io/version: "0.1"
    annotations:
      tekton.dev/pipelines.minVersion: "0.11.3"
      tekton.dev/tags: s2i, php
      tekton.dev/displayName: "s2i php"
  spec:
    description: >-
      s2i-php task fetches a Git repository and builds and
      pushes a container image using S2I and a PHP builder image.
    params:
      - name: MINOR_VERSION
        description: The minor version of the php
        default: '2'
        type: string
      - name: PATH_CONTEXT
        description: The location of the path to run s2i from.
        default: .
        type: string
      - name: TLSVERIFY
        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
        default: "true"
        type: string
    resources:
      inputs:
        - name: source
          type: git
      outputs:
        - name: image
          type: image
    steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i:latest
      workingDir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'tgabriel/openshift-nginx-phpfpm-s2i:1.0', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
      - mountPath: /gen-source
        name: gen-source
    - name: build
      image: quay.io/buildah/stable:v1.11.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      securityContext:
        privileged: true
    - name: php-testing
      workingDir: /workspace/source
      command: ['phpunit', '--bootstrap', '/workspace/source/web/wp-content/themes/twentyseventeen/autoload.php', '/workspace/source/tests/EmailTest.php']
      image: jakzal/phpqa:latest
      volumeMounts:
      - mountPath: /gen-source
        name: gen-source
    - name: push
      image: quay.io/buildah/stable:v1.11.0
      command: ['buildah', 'push', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true
    volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: app-git
  spec:
    params:
    - name: url
      value: https://github.com/Tessg22/making-a-wordpress-developer-stack-on-openshift-4
    type: git
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: app-image
  spec:
    params:
    - name: url
      value: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/openshift-nginx-phpfpm-s2i
    type: image
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: openshift-nginx-phpfpm-deploy-pipelinerun-
  spec:
    pipelineRef:
      name: build-and-deploy
    params:
    - name: deployment-name
      value: openshift-nginx-phpfpm
    - name: git-url
      value: https://github.com/Tessg22/making-a-wordpress-developer-stack-on-openshift-4.git
    - name: IMAGE
      value: image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/vote-ui
    workspaces:
    - name: shared-workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 500Mi
    resources:
    - name: app-git
      resourceRef:
        name: app-git
    - name: app-image
      resourceRef:
        name: app-image
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  from: 'wordpress-[a-f0-9]{6}'
  generate: expression
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
- description: Maximum amount of memory limits the App container can use.
  displayName: Memory Limit
  name: APP_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of cpu limits the App container can use.
  displayName: CPU Limit
  name: APP_CPU_LIMIT
  required: true
  value: 200m
- description: Maximum amount of memory requests the App container can use.
  displayName: Memory Request
  name: APP_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of cpu requests the App container can use.
  displayName: CPU Request
  name: APP_CPU_REQUEST
  required: true
  value: 200m
- description: Maximum amount of memory limits the MariaDB container can use.
  displayName: Memory Limit (MySQL)
  name: DB_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of cpu limits the MariaDB container can use.
  displayName: CPU Limit (MySQL)
  name: DB_CPU_LIMIT
  required: true
  value: 200m
- description: Maximum amount of memory requests the MariaDB container can use.
  displayName: Memory Request (MySQL)
  name: DB_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of cpu requests the MariaDB container can use.
  displayName: CPU Request (MySQL)
  name: DB_CPU_REQUEST
  required: true
  value: 200m  
- description: Volume space available for DB data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Volume space available for sites/default/files, e.g. 512Mi, 2Gi
  displayName: Files Volume Capacity
  name: FILES_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Clusters Router Canonical Hostname is self explanatory.
  displayName: Router Canonical Hostname 
  name: ROUTER_CANONICAL_HOSTNAME
- displayName: Database Name
  name: MYSQL_DATABASE
  required: true
  value: wordpress
- displayName: Database User
  name: MYSQL_USER
  required: true
  value: wordpress
- name: MYSQL_ROOT_PASSWORD
  displayName: MySQL root user Password
  description: Password for the MySQL root user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- displayName: Database Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
